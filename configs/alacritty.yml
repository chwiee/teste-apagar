window:
  padding:
    x: 6
    y: 6
  dynamic_padding: false
  decorations: none
  startup_mode: Windowed
  title: Alacritty
  class:
    instance: Alacritty
    general: Alacritty
  # dark | light | None
  gtk_theme_variant: dark

scrolling:
  history: 10000
  multiplier: 10
  auto_scroll: true

tabspaces: 8

font:
  normal:
    family: Source Code Pro
    style: Regular

  bold:
    family: Source Code Pro
    style: Bold

  italic:
    family: Source Code Pro
    style: Italic

  bold_italic:
    family: Source Code Pro
    style: Bold Italic

  size: 12.0

  offset:
    x: 0
    y: 1

  glyph_offset:
    x: 0
    y: 0

draw_bold_text_with_bright_colors: true

colors:
  primary:
    background: '0x282c34'
    foreground: '0xbbc2cf'
  selection:
    text: '0xbbc2cf'
  normal:
    black:   '0x1c1f24'
    red:     '0xff6c6b'
    green:   '0x98be65'
    yellow:  '0xda8548'
    blue:    '0x51afef'
    magenta: '0xc678dd'
    cyan:    '0x5699af'
    white:   '0x202328'
  bright:
    black:   '0x5b6268'
    red:     '0xda8548'
    green:   '0x4db5bd'
    yellow:  '0xecbe7b'
    blue:    '0x3071db'   # This is 2257a0 in Doom Emacs but I lightened it.
    magenta: '0xa9a1e1'
    cyan:    '0x46d9ff'
    white:   '0xdfdfdf'
# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '0xffffff'

background_opacity: 1.0

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  unfocused_hollow: true

live_config_reload: true

#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false

  # Record all characters and escape sequences as test data.
  #ref_test: false

mouse:
  # Click settings
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false

  url:
    launcher:
      program: xdg-open

# Mouse bindings
# - `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
# - `action` (see key bindings)
# And optionally:
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }


# Key Bindings
# - `key`: Identifier of the key pressed
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
# - `chars`: Send a byte sequence to the running application
# - `action`: Execute a predefined action
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
# And optionally:
# - `mods`: Key modifiers to filter binding actions
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
key_bindings:
  - { key: V,         mods: Alt,           action: Paste                       }
  - { key: C,         mods: Alt,           action: Copy                        }
  - { key: Insert,    mods: Shift,         action: PasteSelection              }
  - { key: Key0,      mods: Control,       action: ResetFontSize               }
  - { key: Equals,    mods: Control,       action: IncreaseFontSize            }
  - { key: Plus,      mods: Control,       action: IncreaseFontSize            }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  - { key: Paste,     mods: None,          action: Paste                       }
  - { key: Copy,      mods: None,          action: Copy                        }
  - { key: L,         mods: Control,       action: ClearLogNotice              }
  - { key: L,         mods: Control,       chars: "\x0c"                       }
  - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt  }
